package org.waman.multiverse

object UnitdefsProperties{
  val version: String = "0.5-alpha"

  def getUnitInfo: Seq[UnitInfo[_]] = Seq(
    unit.angle.AngleUnit,
    unit.angle.AngularVelocityUnit,
    unit.angle.FrequencyUnit,
    unit.angle.SolidAngleUnit,
    unit.basic.AreaUnit,
    unit.basic.LengthUnit,
    unit.basic.MassUnit,
    unit.basic.TimeUnit,
    unit.basic.VelocityUnit,
    unit.basic.VolumeUnit,
    unit.chemistry.AmountOfSubstanceUnit,
    unit.chemistry.CatalysisUnit,
    unit.density.DensityUnit,
    unit.density.LineDensityUnit,
    unit.electromagnetism.CapacitanceUnit,
    unit.electromagnetism.ElectricalConductanceUnit,
    unit.electromagnetism.ElectricalResistanceUnit,
    unit.electromagnetism.ElectricChargeUnit,
    unit.electromagnetism.ElectricCurrentUnit,
    unit.electromagnetism.ElectricDipoleUnit,
    unit.electromagnetism.InductanceUnit,
    unit.electromagnetism.MagneticFieldStrengthUnit,
    unit.electromagnetism.MagneticFluxUnit,
    unit.electromagnetism.MagneticFluxDensityUnit,
    unit.electromagnetism.TimePerLengthUnit,
    unit.electromagnetism.TimeSquaredPerLengthUnit,
    unit.electromagnetism.VoltageUnit,
    unit.fluid.DynamicViscosityUnit,
    unit.fluid.KinematicViscosityUnit,
    unit.fluid.PressureUnit,
    unit.fluid.VolumeFlowUnit,
    unit.mechanics.AccelerationUnit,
    unit.mechanics.AngularMomentumUnit,
    unit.mechanics.EnergyUnit,
    unit.mechanics.ForceUnit,
    unit.mechanics.MassTorqueUnit,
    unit.mechanics.MomentumUnit,
    unit.mechanics.PowerUnit,
    unit.mechanics.TimeSquaredUnit,
    unit.photometry.IlluminanceUnit,
    unit.photometry.LuminanceUnit,
    unit.photometry.LuminousFluxUnit,
    unit.photometry.LuminousIntensityUnit,
    unit.radioactivity.AbsorbedDoseUnit,
    unit.radioactivity.EquivalentDoseUnit,
    unit.radioactivity.EquivalentDoseRateUnit,
    unit.radioactivity.ExposureUnit,
    unit.radioactivity.RadioactivityUnit,
    unit.radiometry.AreaFrequencyUnit,
    unit.radiometry.IrradianceUnit,
    unit.radiometry.SpectralIrradianceUnit,
    unit.thermodynamics.AbsoluteTemperatureUnit,
    unit.thermodynamics.EntropyUnit,
    unit.thermodynamics.TemperatureUnit
  )
}
