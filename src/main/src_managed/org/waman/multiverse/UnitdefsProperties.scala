package org.waman.multiverse

object UnitdefsProperties{
  val version: String = "0.2"

  def getUnitInfo: Seq[UnitInfo[_]] = Seq(
    unit.angle.AngleUnit,
    unit.angle.AngularVelocityUnit,
    unit.angle.FrequencyUnit,
    unit.angle.SolidAngleUnit,
    unit.basic.AreaUnit,
    unit.basic.LengthUnit,
    unit.basic.MassUnit,
    unit.basic.TimeUnit,
    unit.basic.VelocityUnit,
    unit.basic.VolumeUnit,
    unit.chemistry.AmountOfSubstanceUnit,
    unit.chemistry.CatalysisUnit,
    unit.density.DensityUnit,
    unit.density.LineDensityUnit,
    unit.electrics.CapacitanceUnit,
    unit.electrics.ChargeUnit,
    unit.electrics.ConductanceUnit,
    unit.electrics.CurrentUnit,
    unit.electrics.DipoleUnit,
    unit.electrics.ResistanceUnit,
    unit.electrics.VoltageUnit,
    unit.fluid.DynamicViscosityUnit,
    unit.fluid.KinematicViscosityUnit,
    unit.fluid.PressureUnit,
    unit.fluid.VolumeFlowUnit,
    unit.magnetics.FluxUnit,
    unit.magnetics.FluxDensityUnit,
    unit.magnetics.InductanceUnit,
    unit.mechanics.AccelerationUnit,
    unit.mechanics.AngularMomentumUnit,
    unit.mechanics.EnergyUnit,
    unit.mechanics.ForceUnit,
    unit.mechanics.MassTorqueUnit,
    unit.mechanics.MomentumUnit,
    unit.mechanics.PowerUnit,
    unit.mechanics.TimeSquaredUnit,
    unit.optics.IlluminanceUnit,
    unit.optics.LuminanceUnit,
    unit.optics.LuminousFluxUnit,
    unit.optics.LuminousIntensityUnit,
    unit.radiation.AbsorbedDoseUnit,
    unit.radiation.EquivalentDoseUnit,
    unit.radiation.EquivalentDoseRateUnit,
    unit.radiation.ExposureUnit,
    unit.radiation.RadioactivityUnit,
    unit.thermodynamics.AbsoluteTemperatureUnit,
    unit.thermodynamics.EntropyUnit,
    unit.thermodynamics.TemperatureUnit
  )
}
